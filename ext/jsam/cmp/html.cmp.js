
   module.exports = function(obj)
   {
   // locals
   // ------------------------------------------------------------------------------------------
      var tpe = 'text/html';

      var cfg = JSAM.compiler[tpe].config;
      var htm = '';

      if (typeOf(obj) == 'object')
      { obj = [obj]; }

      var tagList = cfg.ndeList.split(' ').toObject();
      var voidTgs = cfg.voidNde.split(' ').toObject();
      var srcTags = cfg.srcNode.split(' ').toObject();
   // ------------------------------------------------------------------------------------------

   // build Markup tree
   // ------------------------------------------------------------------------------------------
      var buildMkp = function(dfn, lvl)
      {
      // data
      // ---------------------------------------------------------------------------------------
         var src = null;
      // ---------------------------------------------------------------------------------------

      // indentation
      // ---------------------------------------------------------------------------------------
         var ind = '';

         if (!lvl)
         { lvl = 0; }

         for (var n=0; n<lvl; n++)
         { ind += '\t'; }
      // ---------------------------------------------------------------------------------------

      // distinguish data type && format accordingly
      // ---------------------------------------------------------------------------------------
         if (typeOf(dfn) == 'object')
         {
            if (tagList[Object.keys(dfn)[0]])
            { src = [dfn]; }
            else
            { src = JSON.stringify(dfn); }
         }
         else if (typeOf(dfn) == 'array')
         {
            for (var i in dfn)
            {
               if (typeOf(dfn[i]) == 'object')
               {
                  if (tagList[Object.keys(dfn[i])[0]])
                  {
                     src = dfn;
                     break;
                  }
               }
            }

            if (src === null)
            { src = JSON.stringify(dfn); }
         }
         else
         {
            src = dfn.toString();
         }
      // ---------------------------------------------------------------------------------------

      // result is done (as string)
      // ---------------------------------------------------------------------------------------
         if (typeOf(src) == 'string')
         {
            var lns = src.split('\n');
            var val = '';

            for (var l in lns)
            {
               val += ind+lns[l]+'\n';
            }

            return ind+val.trim()+'\n';
         }
      // ---------------------------------------------------------------------------------------

      // build node list
      // ---------------------------------------------------------------------------------------
         if (typeOf(src) == 'array')
         {
         // define locals
         // ------------------------------------------------------------------------------------
            var dtc, itm, sel, atr, val, rsl='';
         // ------------------------------------------------------------------------------------

         // loop through list
         // ------------------------------------------------------------------------------------
            src.forEach(function(nde, idx, arr)
            {
            // set locals
            // ---------------------------------------------------------------------------------
               dtc = cfg;
               sel = Object.keys(nde)[0];
               atr = nde[sel];
               val = null;
            // ---------------------------------------------------------------------------------

            // only create a node for registered node tags
            // ------------------------------------------------------------------------------
               if (tagList[sel])
               {
               // bgn tag
               // ---------------------------------------------------------------------------
                  rsl += ind+'<'+sel;

                  if ((typeOf(dtc.autoAtr) == 'object') && (typeOf(dtc.autoAtr[sel]) == 'object'))
                  {
                     for (var aaa in dtc.autoAtr[sel])
                     {
                        rsl += ' '+aaa+'="'+dtc.autoAtr[sel][aaa]+'"';
                     }
                  }

                  if (typeOf(atr) == 'object')
                  {
                     for (var i in atr)
                     {
                        if (i == 'src')
                        {
                           if ((typeOf(atr[i]) == 'string') && (atr[i].type == 'path') && (atr[i][0] == '.'))
                           {
                              val = atr[i];

                              if (!path.existsSync(val))
                              { val = '404'; }
                              else
                              { val = path.readFileSync(val, {encoding:'utf8'}); }
                           }
                           else if (typeOf(atr[i]) == 'object')
                           {}
                           else
                           { rsl += ' '+i+'="'+atr[i]+'"'; }
                        }
                        else
                        { rsl += ' '+i+'="'+atr[i]+'"'; }
                     }
                  }
                  else
                  { val = atr; }

                  rsl += '>\n';
               // ---------------------------------------------------------------------------

               // insert content
               // ---------------------------------------------------------------------------
                  if (val !== null)
                  {
                     lvl++;
                     rsl += buildMkp(val, lvl);
                     lvl--;
                  }
               // ---------------------------------------------------------------------------

               // end tag - if not void
               // ---------------------------------------------------------------------------
                  if (!voidTgs[sel])
                  { rsl += ind+'</'+sel+'>\n'; }
               // ---------------------------------------------------------------------------
               }
            // ---------------------------------------------------------------------------------
            });
         // ------------------------------------------------------------------------------------

         // dispatch result
         // ------------------------------------------------------------------------------------
            return rsl;
         // ------------------------------------------------------------------------------------
         }
      // ---------------------------------------------------------------------------------------
      };
   // ------------------------------------------------------------------------------------------


      obj.forEach(function(nde,idx)
      {
         htm += buildMkp(nde);
      });

      return htm;
   };
